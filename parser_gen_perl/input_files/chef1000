The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias
The Perl language is well known mainly for its flexibility and for providing powerful text processing mechanisms, along with powerful regular expressions and related 
functionalities to facilitate data extraction and manipulation. Although regular expressions are quite helpful in the construction of parsers and Perl 5.10 already 
supports recursive descent parsers, these mechanisms are not always enough to recognise complex textual structures and parse it into useable data structures. This makes 
the process of constructing parsers painful and time consuming when dealing with highly complex or recursive data. To ease this process some parser generator tools were 
developed in various languages. 
There are a few modules on CPAN to help with the parser generation process in Perl, however some are limited, only supporting a particular parser algorithm and do not 
covering some desirable needs of the user. 
These modules are going to be analysed and tested for performance and usability purposes, allowing a proper evaluation of the results and careful considerations about 
the state of art of parser generation using Perl. 
Hugo Areias